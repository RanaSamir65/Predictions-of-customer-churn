#Reading the Cluster4 set
Cluster4= read.csv("Cluster4.csv")
Cluster4$Cluster = NULL
str(Cluster4)
summary(Cluster4)
table(Cluster4$Education_Level)
table(Cluster4$Income_Category)

#Preparing the Cluster4set
Cluster4$Attrition_Flag = ifelse(Cluster4$Attrition_Flag == "Existing Customer", 0, 1)
Cluster4$CLIENTNUM = NULL
Cluster4$Gender = NULL
Cluster4$Education_Level = ifelse(Cluster4$Education_Level == "Unknown", 1, ifelse(Cluster4$Education_Level == "Uneducated", 2, ifelse(Cluster4$Education_Level == "High School", 3, ifelse(Cluster4$Education_Level == "College", 4, ifelse(Cluster4$Education_Level == "Graduate", 5, ifelse(Cluster4$Education_Level == "Post-Graduate",6,ifelse(Cluster4$Education_Level == "Doctorate",7,8)))))))
Cluster4$Income_Category = ifelse(Cluster4$Income_Category == "Unknown", 1, ifelse(Cluster4$Income_Category == "Less than $40K", 2, ifelse(Cluster4$Income_Category == "$40K - $60K", 3, ifelse(Cluster4$Income_Category == "$60K - $80K", 4, ifelse(Cluster4$Income_Category == "$80K - $120K", 5, ifelse(Cluster4$Income_Category == "$120K +",6,7))))))
Marital_Status = unique(Cluster4$Marital_Status)
Marital_Status
Cluster4$Marital_Status = NULL
Card_Category = unique(Cluster4$Card_Category)
Card_Category
for (c in Card_Category){
  assign(paste(c), ifelse(Cluster4$Card_Category == c,1,0))
}
Cluster4$Blue = Blue
Cluster4$Gold = Gold
Cluster4$Card_Category = NULL
#splitting the Cluster4 set into training and testing set
library(caTools)
set.seed(144)
spl = sample.split(Cluster4$Attrition_Flag, SplitRatio=0.7)
TrainCluster4 = subset(Cluster4, spl==TRUE)
TestCluster4 = subset(Cluster4, spl==FALSE)

#Baseline accuracy

table(TestCluster4$Attrition_Flag)
acc = 468 / 491
acc
#0.9531568

#Using Logistic Regression model
LogReg = glm(Attrition_Flag~. ,  data = TrainCluster4, family = binomial)
summary(LogReg)

#Remove insignificant variables
Regression_Data = TrainCluster4
Regression_Data$Blue = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Gold = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Credit_Limit = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Avg_Open_To_Buy = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Customer_Age = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Income_Category = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Education_Level = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

#prediction using logistic regression model
PredLogReg = predict(LogReg, newdata= TestCluster4, type = "response")


library(ROCR)
ROCRpred = prediction(PredLogReg, TestCluster4$Attrition_Flag)
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1),text.adj=c(-0.5,0.5))

#Try Threshold 0.1 
table(TestCluster4$Attrition_Flag, PredLogReg>0.10)
AccuracyLog = ( 21 + 431) / 491
AccuracyLog
#0.9205703

#Try Threshold 0.2 
table(TestCluster4$Attrition_Flag, PredLogReg>0.2)
AccuracyLog = ( 17 + 442) / 491
AccuracyLog
#0.9348269

#Try Threshold 0.3
table(TestCluster4$Attrition_Flag, PredLogReg>0.30)
AccuracyLog = ( 17 + 449) / 491
AccuracyLog
#0.9490835

#Try Threshold 0.4 (Best)
table(TestCluster4$Attrition_Flag, PredLogReg>0.40)
AccuracyLog = ( 16 + 456) / 491
AccuracyLog
#0.9613035
sensitivity = 16 / 23
sensitivity
specificity = 456 / 468
specificity

#Using CART model
library(rpart)
library(rpart.plot)
#determine the cp to be used
library(caret)
set.seed(2)
Cpcontrol = trainControl( method = "cv", number = 10 )
Grid = data.frame(.cp = seq(0,0.092,0.001))
cartCV = train(Attrition_Flag~. , data = TrainCluster4, method = "rpart", trControl = Cpcontrol, tuneGrid = Grid )
cartCV
plot(cartCV)
#best cp is 0.055

CART = rpart(Attrition_Flag~., data = TrainCluster4, method = "class", cp = 0.055)
prp(CART)
PredCART = predict(CART, newdata= TestCluster4)
PredCART
pred.prob = PredCART[,2]

ROCRpred = prediction(pred.prob, TestCluster4$Attrition_Flag)
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1),text.adj=c(-0.5,0.5))

#Try Threshold 0.1 
table(TestCluster4$Attrition_Flag, pred.prob > 0.1)
AccuracyCART = (15 + 453) / 491
AccuracyCART
# 0.9531568

#Try Threshold 0.2
table(TestCluster4$Attrition_Flag, pred.prob > 0.2)
AccuracyCART = (15 + 453) / 491
AccuracyCART
#0.9531568

#Try Threshold 0.3
table(TestCluster4$Attrition_Flag, pred.prob > 0.3)
AccuracyCART = (15 + 460) / 491
AccuracyCART
#0.9674134

#Try Threshold 0.4 (Best)
table(TestCluster4$Attrition_Flag, pred.prob > 0.4)
AccuracyCART = (15 + 460) / 491
AccuracyCART
#0.9674134

sensitivity = 15 / 23
sensitivity
specificity = 460 / 468
specificity

table(TestCluster4$Attrition_Flag, pred.prob > 0.5)
AccuracyCART = (15 + 460) / 491
AccuracyCART
#0.9674134

#Use random forest model
library(randomForest)
set.seed(1)
RanFor = randomForest(Attrition_Flag ~ . , data = TrainCluster4, importance= TRUE)
RanFor
# error = 0.01955759
plot(RanFor, type = "simple")

varImpPlot(RanFor, sort=TRUE, n.var=15)
PredRanFor = predict(RanFor, newdata=TestCluster4)


ROCRpred = prediction(PredRanFor, TestCluster4$Attrition_Flag)
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1),text.adj=c(-0.5,0.5))

#Try Threshold 0.1
table(TestCluster4$Attrition_Flag, PredRanFor > 0.1)
Accuracy = (22 + 427) / 491
Accuracy
#0.9144603

#Try Threshold 0.2
table(TestCluster4$Attrition_Flag, PredRanFor > 0.2)
Accuracy = (20 + 447) / 491
Accuracy
#0.9490835

#Try Threshold 0.3
table(TestCluster4$Attrition_Flag, PredRanFor > 0.3)
Accuracy = (18+ 460) / 491
Accuracy
#0.9735234

#Try Threshold 0.4 (Best)
table(TestCluster4$Attrition_Flag, PredRanFor > 0.40)
Accuracy = (16+ 465) / 491
Accuracy
#0.9796334
sensitivity = 16 / 23
sensitivity
specificity = 465 / 468
specificity