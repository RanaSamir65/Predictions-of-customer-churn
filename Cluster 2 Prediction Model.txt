#Reading the Cluster2 set
Cluster2= read.csv("Cluster2.csv")
Cluster2$Cluster = NULL
str(Cluster2)
summary(Cluster2)

#Preparing the Cluster2set
Cluster2$Attrition_Flag = ifelse(Cluster2$Attrition_Flag == "Existing Customer", 0, 1)
Cluster2$Gender = ifelse(Cluster2$Gender == "F", 1, 0)
Cluster2$CLIENTNUM = NULL
Cluster2$Education_Level = ifelse(Cluster2$Education_Level == "Unknown", 1, ifelse(Cluster2$Education_Level == "Uneducated", 2, ifelse(Cluster2$Education_Level == "High School", 3, ifelse(Cluster2$Education_Level == "College", 4, ifelse(Cluster2$Education_Level == "Graduate", 5, ifelse(Cluster2$Education_Level == "Post-Graduate",6,ifelse(Cluster2$Education_Level == "Doctorate",7,8)))))))
Cluster2$Income_Category = ifelse(Cluster2$Income_Category == "Unknown", 1, ifelse(Cluster2$Income_Category == "Less than $40K", 2, ifelse(Cluster2$Income_Category == "$40K - $60K", 3, ifelse(Cluster2$Income_Category == "$60K - $80K", 4, ifelse(Cluster2$Income_Category == "$80K - $120K", 5, ifelse(Cluster2$Income_Category == "$120K +",6,7))))))
Marital_Status = unique(Cluster2$Marital_Status)
Marital_Status
Cluster2$Marital_Status = NULL
Card_Category = unique(Cluster2$Card_Category)
Card_Category
for (c in Card_Category){
  assign(paste(c), ifelse(Cluster2$Card_Category == c,1,0))
}
Cluster2$Blue = Blue
Cluster2$Gold = Gold
Cluster2$Silver = Silver
Cluster2$Platinum = Platinum
Cluster2$Card_Category = NULL

#splitting the Cluster2 set into training and testing set
library(caTools)
set.seed(144)
spl = sample.split(Cluster2$Attrition_Flag, SplitRatio=0.7)
TrainCluster2 = subset(Cluster2, spl==TRUE)
TestCluster2 = subset(Cluster2, spl==FALSE)

#Baseline accuracy

table(TestCluster2$Attrition_Flag)
acc = 125 / 225
acc
#0.5555556

#Using Logistic Regression model
LogReg = glm(Attrition_Flag~. ,  data = TrainCluster2, family = binomial)
summary(LogReg)

#Remove insignificant variables
Regression_Data = TrainCluster2
Regression_Data$Silver = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)
Regression_Data$Platinum = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)
Regression_Data$Dependent_count = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)
Regression_Data$Total_Revolving_Bal = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)
Regression_Data$Education_Level = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)
Regression_Data$Income_Category = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)
Regression_Data$Customer_Age = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)
Regression_Data$Avg_Open_To_Buy = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)
Regression_Data$Dependent_count = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg) #(Best AIC)

#prediction using logistic regression model
PredLogReg = predict(LogReg, newdata= TestCluster2, type = "response")


library(ROCR)
ROCRpred = prediction(PredLogReg, TestCluster2$Attrition_Flag)
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1),text.adj=c(-0.5,0.5))

#Try Threshold 0.30 to 0.6
table(TestCluster2$Attrition_Flag, PredLogReg>0.30)
AccuracyLog = ( 89 + 96) / 225
AccuracyLog
#0.8222222

#Try Threshold 0.5
table(TestCluster2$Attrition_Flag, PredLogReg>0.5)
AccuracyLog = (77+115) / 225
AccuracyLog
#0.8533333
 
#Try Threshold 0.40 (Best)
table(TestCluster2$Attrition_Flag, PredLogReg>0.4)
AccuracyLog = ( 84 + 109) / 225
AccuracyLog
#0.8577778
Sensitivity = 93 / 100
Sensitivity
#0.93
specificity = 113 / 125
specificity
#0.904


#Using CART model
library(rpart)
library(rpart.plot)

#determine the cp to be used
library(caret)
set.seed(2)
Cpcontrol = trainControl( method = "cv", number = 10 )
Grid = data.frame(.cp = seq(0,0.092,0.001))
cartCV = train(Attrition_Flag~. , data = TrainCluster2, method = "rpart", trControl = Cpcontrol, tuneGrid = Grid )
cartCV
plot(cartCV)
#best cp is 0.002

CART = rpart(Attrition_Flag~., data = TrainCluster2, method = "class", cp = 0.002)
prp(CART)
PredCART = predict(CART, newdata= TestCluster2)
PredCART
pred.prob = PredCART[,2]

ROCRpred = prediction(pred.prob, TestCluster2$Attrition_Flag)
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1),text.adj=c(-0.5,0.5))

#Try Threshold 0.2 (Best)
table(TestCluster2$Attrition_Flag, pred.prob > 0.2)
AccuracyCART = (96 + 117) / 225
AccuracyCART
#0.9466667
Sensitivity = 96 / 100
Sensitivity
specificity = 117 / 125
specificity

#Try Threshold 0.3 (Best)
table(TestCluster2$Attrition_Flag, pred.prob > 0.3)
AccuracyCART = (96 + 117) / 225
AccuracyCART
#0.9466667

table(TestCluster2$Attrition_Flag, pred.prob > 0.5)
AccuracyCART = (95 + 118) / 225
AccuracyCART
#0.9466667

table(TestCluster2$Attrition_Flag, pred.prob > 0.8)
AccuracyCART = (92 + 118) / 225
AccuracyCART
#00.9333333

#Use random forest model
library(randomForest)
set.seed(1)
RanFor = randomForest(Attrition_Flag ~ . , data = TrainCluster2, importance= TRUE)
RanFor
# error = 0.05938112
plot(RanFor, type = "simple")

varImpPlot(RanFor, sort=TRUE, n.var=15)
PredRanFor = predict(RanFor, newdata=TestCluster2)


ROCRpred = prediction(PredRanFor, TestCluster2$Attrition_Flag)
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1),text.adj=c(-0.5,0.5))

#Try Threshold 0.6 to 0.4 

#Try Threshold 0.4 (Best)
table(TestCluster2$Attrition_Flag, PredRanFor > 0.4) #(Best)
Accuracy = (96+ 114) / 225
Accuracy
#0.9333333
Sensitivity = 96 / 100
Sensitivity
specificity = 114 / 125
specificity

table(TestCluster2$Attrition_Flag, PredRanFor >0.5) 
AccuracyRand = (93 + 117) / 225
AccuracyRand
# 0.9333333

#Try Threshold 0.6
table(TestCluster2$Attrition_Flag, PredRanFor > 0.6)
Accuracy = (88 + 118) / 225
Accuracy
#0.9155556

