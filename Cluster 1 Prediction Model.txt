#Reading the Cluster1 set
Cluster1= read.csv("Cluster1.csv")
Cluster1$Cluster = NULL
str(Cluster1)
summary(Cluster1)
table(Cluster1$Education_Level)
table(Cluster1$Income_Category)

#Preparing the Cluster1set
Cluster1$Attrition_Flag = ifelse(Cluster1$Attrition_Flag == "Existing Customer", 0, 1)
Cluster1$CLIENTNUM = NULL
Cluster1$Gender = NULL
Cluster1$Education_Level = ifelse(Cluster1$Education_Level == "Unknown", 1, ifelse(Cluster1$Education_Level == "Uneducated", 2, ifelse(Cluster1$Education_Level == "High School", 3, ifelse(Cluster1$Education_Level == "College", 4, ifelse(Cluster1$Education_Level == "Graduate", 5, ifelse(Cluster1$Education_Level == "Post-Graduate",6,ifelse(Cluster1$Education_Level == "Doctorate",7,8)))))))
Cluster1$Income_Category = ifelse(Cluster1$Income_Category == "Unknown", 1, ifelse(Cluster1$Income_Category == "Less than $40K", 2, ifelse(Cluster1$Income_Category == "$40K - $60K", 3, ifelse(Cluster1$Income_Category == "$60K - $80K", 4, ifelse(Cluster1$Income_Category == "$80K - $120K", 5, ifelse(Cluster1$Income_Category == "$120K +",6,7))))))
Marital_Status = unique(Cluster1$Marital_Status)
Marital_Status
Cluster1$Marital_Status = NULL
Card_Category = unique(Cluster1$Card_Category)
Card_Category
for (c in Card_Category){
  assign(paste(c), ifelse(Cluster1$Card_Category == c,1,0))
}
Cluster1$Blue = Blue
Cluster1$Gold = Gold
Cluster1$Platinum = Platinum
Cluster1$Card_Category = NULL

#splitting the Cluster1 set into training and testing set
library(caTools)
set.seed(144)
spl = sample.split(Cluster1$Attrition_Flag, SplitRatio=0.7)
TrainCluster1 = subset(Cluster1, spl==TRUE)
TestCluster1 = subset(Cluster1, spl==FALSE)

#Baseline accuracy

table(TestCluster1$Attrition_Flag)
acc = 497 / 607
acc
#0.8187809

#Using Logistic Regression model
LogReg = glm(Attrition_Flag~. ,  data = TrainCluster1, family = binomial)
summary(LogReg)

#Remove insignificant variables
Regression_Data = TrainCluster1
Regression_Data$Customer_Age = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)
Regression_Data$Total_Revolving_Bal = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)
Regression_Data$Avg_Open_To_Buy = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)
Regression_Data$Income_Category = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)
Regression_Data$Total_Amt_Chng_Q4_Q1 = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)
Regression_Data$Months_on_book = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)
Regression_Data$Gold = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)
Regression_Data$Platinum = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)
Regression_Data$Education_Level = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)
Regression_Data$Dependent_count = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

#prediction using logistic regression model
PredLogReg = predict(LogReg, newdata= TestCluster1, type = "response")


library(ROCR)
ROCRpred = prediction(PredLogReg, TestCluster1$Attrition_Flag)
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1),text.adj=c(-0.5,0.5))

#Try Threshold between 0.20 and 0.4 
table(TestCluster1$Attrition_Flag, PredLogReg>0.20)
AccuracyLog = ( 97 + 440) / 607
AccuracyLog
#0.8846787

#Try Threshold 0.30
table(TestCluster1$Attrition_Flag, PredLogReg>0.30)
AccuracyLog = ( 94 + 455) / 607
AccuracyLog
#0.9044481

#Try Threshold 0.40 (Best)
table(TestCluster1$Attrition_Flag, PredLogReg>0.40)
AccuracyLog = ( 88 + 468) / 607
AccuracyLog
#0.9159802 
sensitivity = 88 / 110
sensitivity
specificity = 468 / 497
specificity

#Using CART model
library(rpart)
library(rpart.plot)

#determine the cp to be used
library(caret)
set.seed(2)
Cpcontrol = trainControl( method = "cv", number = 10 )
Grid = data.frame(.cp = seq(0,0.092,0.001))
cartCV = train(Attrition_Flag~. , data = TrainCluster1, method = "rpart", trControl = Cpcontrol, tuneGrid = Grid )
cartCV
plot(cartCV)
#best cp is 0.003

CART = rpart(Attrition_Flag~., data = TrainCluster1, method = "class", cp = 0.003)
summary(CART)
prp(CART)
PredCART = predict(CART, newdata= TestCluster1)
PredCART
pred.prob = PredCART[,2]

#ROCCP Curve 
library(ROCR)
ROCRpred = prediction(pred.prob, TestCluster1$Attrition_Flag)
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1),text.adj=c(-0.5,0.5))

#Try Threshold 0.1
table(TestCluster1$Attrition_Flag, pred.prob > 0.1)
AccuracyCART = (90 + 466) / 607
AccuracyCART
#0.9159802

#Try Threshold 0.2
table(TestCluster1$Attrition_Flag, pred.prob > 0.2)
AccuracyCART = (87 + 477) / 607
AccuracyCART
#0.9291598

#Try Threshold 0.3
table(TestCluster1$Attrition_Flag, pred.prob > 0.3)
AccuracyCART = (87 + 477) / 607
AccuracyCART
#0.9291598

#Try Threshold 0.4
table(TestCluster1$Attrition_Flag, pred.prob > 0.4)
AccuracyCART = (87 + 477) / 607
AccuracyCART
#0.9291598

table(TestCluster1$Attrition_Flag, pred.prob > 0.5) #(Best)
Accuracy = (86+482) / 607
Accuracy
#0.9357496
sensitivity = 86 /110
sensitivity
specificity = 482/497
specificity

#Use random forest model
library(randomForest)
set.seed(1)
RanFor = randomForest(Attrition_Flag ~ . , data = TrainCluster1, importance= TRUE)
RanFor
# error = 0.03351536
plot(RanFor, type = "simple")

varImpPlot(RanFor, sort=TRUE, n.var=15)
PredRanFor= predict(RanFor, newdata=TestCluster1)


ROCRpred = prediction(PredRanFor, TestCluster1$Attrition_Flag)
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1),text.adj=c(-0.5,0.5))

#Try Threshold between 0.5 and 0.2 
table(TestCluster1$Attrition_Flag, PredRanFor >0.5) #(Best)
AccuracyRand = (90 + 483) / 607
AccuracyRand
#0.9439868

#Try Threshold 0.2
table(TestCluster1$Attrition_Flag, PredRanFor > 0.2)
Accuracy = (103 + 446) / 607
Accuracy
#0.9044481

#Try Threshold 0.3
table(TestCluster1$Attrition_Flag, PredRanFor > 0.3)
Accuracy = (99 + 464) / 607
Accuracy
#0.9275124

#Try Threshold 0.4 
table(TestCluster1$Attrition_Flag, PredRanFor > 0.4)
Accuracy = (96+ 476) / 607
Accuracy
#0.9423394

#Try Threshold 0.5 (Best)
table(TestCluster1$Attrition_Flag, PredRanFor > 0.5)
Accuracy = (90+ 483) / 607
Accuracy
#0.9439868
sensitivity = 90 /110
sensitivity
specificity = 483/497
specificity


