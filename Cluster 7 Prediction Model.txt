#Reading the Cluster7 set
Cluster7= read.csv("Cluster7.csv")
Cluster7$Cluster = NULL
str(Cluster7)
summary(Cluster7)
table(Cluster7$Education_Level)
table(Cluster7$Income_Category)

#Preparing the Cluster7set
Cluster7$Attrition_Flag = ifelse(Cluster7$Attrition_Flag == "Existing Customer", 0, 1)
Cluster7$CLIENTNUM = NULL
Cluster7$Gender = ifelse(Cluster7$Gender == "F", 1, 0)
Cluster7$Education_Level = ifelse(Cluster7$Education_Level == "Unknown", 1, ifelse(Cluster7$Education_Level == "Uneducated", 2, ifelse(Cluster7$Education_Level == "High School", 3, ifelse(Cluster7$Education_Level == "College", 4, ifelse(Cluster7$Education_Level == "Graduate", 5, ifelse(Cluster7$Education_Level == "Post-Graduate",6,ifelse(Cluster7$Education_Level == "Doctorate",7,8)))))))
Cluster7$Income_Category = ifelse(Cluster7$Income_Category == "Unknown", 1, ifelse(Cluster7$Income_Category == "Less than $40K", 2, ifelse(Cluster7$Income_Category == "$40K - $60K", 3, ifelse(Cluster7$Income_Category == "$60K - $80K", 4, ifelse(Cluster7$Income_Category == "$80K - $120K", 5, ifelse(Cluster7$Income_Category == "$120K +",6,7))))))
Marital_Status = unique(Cluster7$Marital_Status)
Marital_Status
Cluster7$Marital_Status = NULL
Card_Category = unique(Cluster7$Card_Category)
Card_Category
for (c in Card_Category){
  assign(paste(c), ifelse(Cluster7$Card_Category == c,1,0))
}
Cluster7$Blue = Blue
Cluster7$Gold = Gold
Cluster7$Silver = Silver
Cluster7$Platinum = Platinum
Cluster7$Card_Category = NULL
#splitting the Cluster7 set into training and testing set
library(caTools)
set.seed(144)
spl = sample.split(Cluster7$Attrition_Flag, SplitRatio=0.7)
TrainCluster7 = subset(Cluster7, spl==TRUE)
TestCluster7 = subset(Cluster7, spl==FALSE)

#Baseline accuracy

table(TestCluster7$Attrition_Flag)
acc = 177 / 211
acc
#0.8388626

#Using Logistic Regression model
LogReg = glm(Attrition_Flag~. ,  data = TrainCluster7, family = binomial)
summary(LogReg)

#Remove insignificant variables
Regression_Data = TrainCluster7

Regression_Data$Gold = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Platinum = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Silver = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Credit_Limit = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Avg_Open_To_Buy = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Customer_Age = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Months_on_book = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Education_Level = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Dependent_count = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Total_Revolving_Bal = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

#prediction using logistic regression model
PredLogReg = predict(LogReg, newdata= TestCluster7, type = "response")

library(ROCR)
ROCRpred = prediction(PredLogReg, TestCluster7$Attrition_Flag)
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1),text.adj=c(-0.5,0.5))

#Try Threshold 0.1 
table(TestCluster7$Attrition_Flag, PredLogReg>0.1)
AccuracyLog = ( 28 + 147) / 211
AccuracyLog
#0.8293839

#Try Threshold 0.2 
table(TestCluster7$Attrition_Flag, PredLogReg>0.2)
AccuracyLog = ( 23 + 160) / 211
AccuracyLog
#0.8672986

#Try Threshold 0.30 
table(TestCluster7$Attrition_Flag, PredLogReg>0.30)
AccuracyLog = ( 21 + 165) / 211
AccuracyLog
#0.8815166
sensitivity = 21 / 34
sensitivity
specificity = 165 / 177
specificity

#Using CART model
library(rpart)
library(rpart.plot)
#determine the cp to be used
library(caret)
set.seed(2)
Cpcontrol = trainControl( method = "cv", number = 10 )
Grid = data.frame(.cp = seq(0,0.092,0.001))
cartCV = train(Attrition_Flag~. , data = TrainCluster7, method = "rpart", trControl = Cpcontrol, tuneGrid = Grid )
cartCV
plot(cartCV)
#best cp is 0.039

CART = rpart(Attrition_Flag~., data = TrainCluster7, method = "class", cp = 0.039)
prp(CART)
PredCART = predict(CART, newdata= TestCluster7)
PredCART
pred.prob = PredCART[,2]

ROCRpred = prediction(pred.prob, TestCluster7$Attrition_Flag)
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1),text.adj=c(-0.5,0.5))


#Try Threshold 0.2
table(TestCluster7$Attrition_Flag, pred.prob > 0.2)
AccuracyCART = (19 + 169) / 211
AccuracyCART
#0.8909953

#Try Threshold 0.3
table(TestCluster7$Attrition_Flag, pred.prob > 0.3)
AccuracyCART = (19 + 169) / 211
AccuracyCART
#0.8909953
sensitivity =  19/ 34
sensitivity
specificity = 169 / 177
specificity

table(TestCluster7$Attrition_Flag, pred.prob > 0.4)
AccuracyCART = (19 + 169) / 211
AccuracyCART
#0.8909953

#Use random forest model
library(randomForest)
set.seed(1)
RanFor = randomForest(Attrition_Flag ~ . , data = TrainCluster7, importance= TRUE)
RanFor
# error =  0.04849069
plot(RanFor, type = "simple")

varImpPlot(RanFor, sort=TRUE, n.var=15)
PredRanFor = predict(RanFor, newdata=TestCluster7)


ROCRpred = prediction(PredRanFor, TestCluster7$Attrition_Flag)
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1),text.adj=c(-0.5,0.5))

#Try Threshold 0.2
table(TestCluster7$Attrition_Flag, PredRanFor > 0.2)
Accuracy = (30 + 155) / 211
Accuracy
#0.8767773


#Try Threshold 0.3 (Best)
table(TestCluster7$Attrition_Flag, PredRanFor > 0.3)
Accuracy = (28 + 169) / 211
Accuracy
#0.9336493
sensitivity =  28/ 34
sensitivity
specificity = 169 / 177
specificity


#Try Threshold 0.4 
table(TestCluster7$Attrition_Flag, PredRanFor > 0.4)
Accuracy = (26+ 171) / 211
Accuracy
#0.9336493

