#Reading the Cluster5 set
Cluster5= read.csv("Cluster5.csv")
Cluster5$Cluster = NULL
str(Cluster5)
summary(Cluster5)
table(Cluster5$Education_Level)
table(Cluster5$Income_Category)

#Preparing the Cluster5set
Cluster5$Attrition_Flag = ifelse(Cluster5$Attrition_Flag == "Existing Customer", 0, 1)
Cluster5$CLIENTNUM = NULL
Cluster5$Gender = ifelse(Cluster5$Gender == "F", 1, 0)
Cluster5$Education_Level = ifelse(Cluster5$Education_Level == "Unknown", 1, ifelse(Cluster5$Education_Level == "Uneducated", 2, ifelse(Cluster5$Education_Level == "High School", 3, ifelse(Cluster5$Education_Level == "College", 4, ifelse(Cluster5$Education_Level == "Graduate", 5, ifelse(Cluster5$Education_Level == "Post-Graduate",6,ifelse(Cluster5$Education_Level == "Doctorate",7,8)))))))
Cluster5$Income_Category = ifelse(Cluster5$Income_Category == "Unknown", 1, ifelse(Cluster5$Income_Category == "Less than $40K", 2, ifelse(Cluster5$Income_Category == "$40K - $60K", 3, ifelse(Cluster5$Income_Category == "$60K - $80K", 4, ifelse(Cluster5$Income_Category == "$80K - $120K", 5, ifelse(Cluster5$Income_Category == "$120K +",6,7))))))
Marital_Status = unique(Cluster5$Marital_Status)
Cluster5$Marital_Status = NULL
Card_Category = unique(Cluster5$Card_Category)
Card_Category
for (c in Card_Category){
  assign(paste(c), ifelse(Cluster5$Card_Category == c,1,0))
}
Cluster5$Blue = Blue
Cluster5$Gold = Gold
Cluster5$Silver = Silver
Cluster5$Card_Category = NULL
#splitting the Cluster5 set into training and testing set
library(caTools)
set.seed(144)
spl = sample.split(Cluster5$Attrition_Flag, SplitRatio=0.7)
TrainCluster5 = subset(Cluster5, spl==TRUE)
TestCluster5 = subset(Cluster5, spl==FALSE)

#Baseline accuracy

table(TestCluster5$Attrition_Flag)
acc = 171 / 207
acc
#0.826087

#Using Logistic Regression model
LogReg = glm(Attrition_Flag~. ,  data = TrainCluster5, family = binomial)
summary(LogReg)

#Remove insignificant variables
Regression_Data = TrainCluster5

Regression_Data$Gold = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Silver = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Blue = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Education_Level = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Credit_Limit = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Avg_Open_To_Buy = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Months_Inactive_12_mon = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Gender = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)


#prediction using logistic regression model
PredLogReg = predict(LogReg, newdata= TestCluster5, type = "response")

library(ROCR)
ROCRpred = prediction(PredLogReg, TestCluster5$Attrition_Flag)
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1),text.adj=c(-0.5,0.5))

#Try Threshold 0.10
table(TestCluster5$Attrition_Flag, PredLogReg>0.10)
AccuracyLog = ( 32 + 143) / 207
AccuracyLog
#0.8454106

#Try Threshold 0.2
table(TestCluster5$Attrition_Flag, PredLogReg>0.2)
AccuracyLog = ( 29 + 156) / 207
AccuracyLog
#0.8937198

#Try Threshold 0.25 (Best)
table(TestCluster5$Attrition_Flag, PredLogReg>0.25)
AccuracyLog = ( 28 + 158) / 207
AccuracyLog
#0.8985507
sensitivity = 28 / 36
sensitivity
specificity = 158 / 171
specificity

#Try Threshold 0.3
table(TestCluster5$Attrition_Flag, PredLogReg>0.3)
AccuracyLog = ( 26 + 159) / 207
AccuracyLog
#0.8937198

#Using CART model
library(rpart)
library(rpart.plot)
#determine the cp to be used
library(caret)
set.seed(2)
Cpcontrol = trainControl( method = "cv", number = 10 )
Grid = data.frame(.cp = seq(0,0.092,0.001))
cartCV = train(Attrition_Flag~. , data = TrainCluster5, method = "rpart", trControl = Cpcontrol, tuneGrid = Grid )
cartCV
plot(cartCV)
#best cp is 0.018

CART = rpart(Attrition_Flag~., data = TrainCluster5, method = "class", cp = 0.018)
prp(CART)
PredCART = predict(CART, newdata= TestCluster5)
PredCART
pred.prob = PredCART[,2]


ROCRpred = prediction(pred.prob, TestCluster5$Attrition_Flag)
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1),text.adj=c(-0.5,0.5))

#Try Threshold 0.1 
table(TestCluster5$Attrition_Flag, pred.prob > 0.1)
AccuracyCART = (32 + 134) / 207
AccuracyCART
# 0.8019324

#Try Threshold 0.2 
table(TestCluster5$Attrition_Flag, pred.prob > 0.2)
AccuracyCART = (23 + 161) / 207
AccuracyCART
#0.8888889

#Try Threshold 0.25
table(TestCluster5$Attrition_Flag, pred.prob > 0.25)
AccuracyCART = (23 + 161) / 207
AccuracyCART
#0.8888889

#Try Threshold 0.3 (Best)
table(TestCluster5$Attrition_Flag, pred.prob > 0.3)
AccuracyCART = (22 + 165) / 207
AccuracyCART
# 0.9033816
sensitivity = 22 / 36
sensitivity
specificity = 165 / 171
specificity


table(TestCluster5$Attrition_Flag, pred.prob > 0.5)
AccuracyCART = (22 + 165) / 207
AccuracyCART
#0.9033816


#Use random forest model

#Use random forest model
library(randomForest)
set.seed(1)
RanFor = randomForest(Attrition_Flag ~ . , data = TrainCluster5, importance= TRUE)
RanFor
# error = 0.05516058
plot(RanFor, type = "simple")

varImpPlot(RanFor, sort=TRUE, n.var=15)

PredRanFor = predict(RanFor, newdata=TestCluster5)


ROCRpred = prediction(PredRanFor, TestCluster5$Attrition_Flag)
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1),text.adj=c(-0.5,0.5))

#Try Threshold 0.2
table(TestCluster5$Attrition_Flag, PredRanFor > 0.2)
Accuracy = (33 + 150) / 207
Accuracy
# 0.884058

#Try Threshold 0.3
table(TestCluster5$Attrition_Flag, PredRanFor > 0.3)
Accuracy = (30 + 162) / 207
Accuracy
#0.9275362

#Try Threshold 0.4 
table(TestCluster5$Attrition_Flag, PredRanFor > 0.40)
Accuracy = (28 + 165) / 207
Accuracy
#0.9323671

#Try Threshold 0.5 
table(TestCluster5$Attrition_Flag, PredRanFor >0.5) #(Best)
AccuracyRand = (25 + 169) / 207
AccuracyRand
#0.9371981
sensitivity = 25 / 36
sensitivity
specificity = 169 / 171
specificity

