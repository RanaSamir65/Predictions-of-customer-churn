#Reading the Cluster8 set
Cluster8= read.csv("Cluster8.csv")
Cluster8$Cluster = NULL
str(Cluster8)
summary(Cluster8)
table(Cluster8$Education_Level)
table(Cluster8$Income_Category)

#Preparing the Cluster8set
Cluster8$Attrition_Flag = ifelse(Cluster8$Attrition_Flag == "Existing Customer", 0, 1)
Cluster8$CLIENTNUM = NULL
Cluster8$Gender = NULL
Cluster8$Education_Level = ifelse(Cluster8$Education_Level == "Unknown", 1, ifelse(Cluster8$Education_Level == "Uneducated", 2, ifelse(Cluster8$Education_Level == "High School", 3, ifelse(Cluster8$Education_Level == "College", 4, ifelse(Cluster8$Education_Level == "Graduate", 5, ifelse(Cluster8$Education_Level == "Post-Graduate",6,ifelse(Cluster8$Education_Level == "Doctorate",7,8)))))))
Cluster8$Income_Category = ifelse(Cluster8$Income_Category == "Unknown", 1, ifelse(Cluster8$Income_Category == "Less than $40K", 2, ifelse(Cluster8$Income_Category == "$40K - $60K", 3, ifelse(Cluster8$Income_Category == "$60K - $80K", 4, ifelse(Cluster8$Income_Category == "$80K - $120K", 5, ifelse(Cluster8$Income_Category == "$120K +",6,7))))))
Marital_Status = unique(Cluster8$Marital_Status)
Marital_Status
Cluster8$Marital_Status = NULL
Card_Category = unique(Cluster8$Card_Category)
Card_Category
Cluster8$Card_Category = NULL
#splitting the Cluster8 set into training and testing set
library(caTools)
set.seed(144)
spl = sample.split(Cluster8$Attrition_Flag, SplitRatio=0.7)
TrainCluster8 = subset(Cluster8, spl==TRUE)
TestCluster8 = subset(Cluster8, spl==FALSE)

#Baseline accuracy

table(TestCluster8$Attrition_Flag)
acc = 411 / 486
acc
#0.845679

#Using Logistic Regression model
LogReg = glm(Attrition_Flag~. ,  data = TrainCluster8, family = binomial)
summary(LogReg)

#Remove insignificant variables
Regression_Data = TrainCluster8

Regression_Data$Total_Amt_Chng_Q4_Q1 = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Avg_Utilization_Ratio = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Dependent_count = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Education_Level = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Months_on_book = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

Regression_Data$Avg_Open_To_Buy = NULL
LogReg = glm(Attrition_Flag~. ,  data = Regression_Data, family = binomial)
summary(LogReg)

#prediction using logistic regression model
PredLogReg = predict(LogReg, newdata= TestCluster8, type = "response")



library(ROCR)
ROCRpred = prediction(PredLogReg, TestCluster8$Attrition_Flag)
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1),text.adj=c(-0.5,0.5))

#Try thresholds between 0.2 to 0.5

#Try Threshold 0.20 
table(TestCluster8$Attrition_Flag, PredLogReg>0.20)
AccuracyLog = ( 58 + 357) / 486
AccuracyLog
#0.8539095

#Try Threshold 0.3
table(TestCluster8$Attrition_Flag, PredLogReg>0.3)
AccuracyLog = ( 53 + 374) / 486
AccuracyLog
#0.8786008

#Try Threshold 0.40 
table(TestCluster8$Attrition_Flag, PredLogReg>0.40)
AccuracyLog = ( 48 + 383) / 486
AccuracyLog
#0.8868313

#Try Threshold 0.5 (Best)
table(TestCluster8$Attrition_Flag, PredLogReg>0.5)
AccuracyLog = (46+391) / 486
AccuracyLog
#0.899177 
sensitivity = 46 / 75
sensitivity
specificity = 391 / 411
specificity

#Using CART model
library(rpart)
library(rpart.plot)
CART = rpart(Attrition_Flag~., data = TrainCluster8, method = "class")
prp(CART)
PredCART = predict(CART, newdata= TestCluster8)
PredCART
pred.prob = PredCART[,2]


ROCRpred = prediction(pred.prob, TestCluster8$Attrition_Flag)
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1),text.adj=c(-0.5,0.5))

#Try threshold 0.5 (Best)
table(TestCluster8$Attrition_Flag, pred.prob > 0.5)
AccuracyCART = (55 + 396) / 486
AccuracyCART
#0.9279835

sensitivity = 55 / 75
sensitivity
specificity = 396 / 411
specificity


#Try Threshold 0.1 
table(TestCluster8$Attrition_Flag, pred.prob > 0.1)
AccuracyCART = (57 + 385) / 486
AccuracyCART
# 0.909465

#Try Threshold 0.2
table(TestCluster8$Attrition_Flag, pred.prob > 0.2)
AccuracyCART = (56 + 388) / 486
AccuracyCART
#0.9135802

#Try Threshold 0.3
table(TestCluster8$Attrition_Flag, pred.prob > 0.3)
AccuracyCART = (56 + 388) / 486
AccuracyCART
#0.9135802

#Try Threshold 0.4
table(TestCluster8$Attrition_Flag, pred.prob > 0.4)
AccuracyCART = (56 + 392) / 486
AccuracyCART
#0.9218107

#Try Threshold 0.45
table(TestCluster8$Attrition_Flag, pred.prob > 0.45)
AccuracyCART = (55 + 396) / 486
AccuracyCART
#0.9279835

#Try Threshold 0.55
table(TestCluster8$Attrition_Flag, pred.prob > 0.55)
AccuracyCART = (55 + 396) / 486
AccuracyCART
#0.9279835

#Use random forest model

library(randomForest)
set.seed(1)
RanFor = randomForest(Attrition_Flag ~ . , data = TrainCluster8)
PredRanFor = predict(RanFor, newdata=TestCluster8)


ROCRpred = prediction(PredRanFor, TestCluster8$Attrition_Flag)
ROCRperf = performance(ROCRpred,"tpr","fpr")
plot(ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1),text.adj=c(-0.5,0.5))


#Try Threshold 0.2
table(TestCluster8$Attrition_Flag, PredRanFor > 0.2)
AccuracyCART = (68 + 375) / 486
AccuracyCART
# 0.9115226

#Try Threshold 0.3 
table(TestCluster8$Attrition_Flag, PredRanFor > 0.3)
AccuracyCART = (62 + 391) / 486
AccuracyCART
# 0.9320988


#Try Threshold 0.4 (Best)
table(TestCluster8$Attrition_Flag, PredRanFor > 0.4)
AccuracyCART = (60+ 403) / 486
AccuracyCART
#0.9526749
sensitivity = 60 / 75
sensitivity
specificity = 403 / 411
specificity
